
.release/control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .funcarea     00000394  07000000  07000000  00008000  2**2
                  ALLOC
  1 .text         00000148  07002000  07002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  07002148  07002148  00002148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000000  07002148  07002148  00002148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000004  07002148  07002148  00002148  2**1
                  ALLOC
  5 .debug_info   0000473b  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000039b  00000000  00000000  00006883  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    0000001e  00000000  00000000  00006c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000048  00000000  00000000  00006c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00006c84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000000cf  00000000  00000000  00006cac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002a47  00000000  00000000  00006d7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000030  00000000  00000000  000097c2  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 0000002e  00000000  00000000  000097f2  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000078  00000000  00000000  00009820  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

07002000 <start_vector>:
 7002000:	08 20 00 07 5c 11 00 00                             . ..\...

07002008 <start_up>:
/*-------------------------------------------------------------------*
 *  public functions                                                 *
 *-------------------------------------------------------------------*/

static void start_up ( void )
{
 7002008:	e92d4008 	push	{r3, lr}
 700200c:	e59f2038 	ldr	r2, [pc, #56]	; 700204c <start_up+0x44>

	/*	initialize the 'data' segment with values from flash
	 */

	src = &__etext;
	dst = &__data_start;
 7002010:	e59f3038 	ldr	r3, [pc, #56]	; 7002050 <start_up+0x48>

	while (dst < &__edata)
 7002014:	e59f1038 	ldr	r1, [pc, #56]	; 7002054 <start_up+0x4c>
 7002018:	e1530001 	cmp	r3, r1
	{
		*dst = *src;
 700201c:	34920004 	ldrcc	r0, [r2], #4
 7002020:	34830004 	strcc	r0, [r3], #4
 7002024:	3afffffb 	bcc	7002018 <start_up+0x10>

	dst = &__bss_start__;

	while (dst < &__bss_end__)
	{
		*dst = 0;
 7002028:	e3a01000 	mov	r1, #0
 700202c:	e59f3024 	ldr	r3, [pc, #36]	; 7002058 <start_up+0x50>
	/*	initialize the 'bss' segment with zero
	 */

	dst = &__bss_start__;

	while (dst < &__bss_end__)
 7002030:	e59f2024 	ldr	r2, [pc, #36]	; 700205c <start_up+0x54>
 7002034:	e1530002 	cmp	r3, r2
	{
		*dst = 0;
 7002038:	34831004 	strcc	r1, [r3], #4
 700203c:	3afffffc 	bcc	7002034 <start_up+0x2c>
		dst++;
	}

	main ();
 7002040:	eb00000c 	bl	7002078 <main>
}
 7002044:	e8bd4008 	pop	{r3, lr}
 7002048:	e12fff1e 	bx	lr
 700204c:	07002148 	.word	0x07002148
 7002050:	07002148 	.word	0x07002148
 7002054:	07002148 	.word	0x07002148
 7002058:	07002148 	.word	0x07002148
 700205c:	0700214c 	.word	0x0700214c

07002060 <timer_function>:
 *-------------------------------------------------------------------*/

static void timer_function ( void )
{
        /* timer interrupt every 10 ms */
        system_ticks++;
 7002060:	e59f200c 	ldr	r2, [pc, #12]	; 7002074 <timer_function+0x14>
 7002064:	e1d230b0 	ldrh	r3, [r2]
 7002068:	e2833001 	add	r3, r3, #1
 700206c:	e1c230b0 	strh	r3, [r2]
 7002070:	e12fff1e 	bx	lr
 7002074:	07002148 	.word	0x07002148

07002078 <main>:
/*-------------------------------------------------------------------*
 *  public functions                                                 *
 *-------------------------------------------------------------------*/

int main ( void )
{
 7002078:	e92d41ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
        unsigned char                asi5_accodi[2];//Länge entspricht der Anzahl der in der Anlage vorhandenen logischen Adressen
        unsigned char                asi5_odi[2];//Ausgänge die gesetzt werden sollen (Hex-Werte)
        int                                 i = 0;

        /* Access ASi5 logical Slave 1 (1 Byte / Slave) */
        asi5_accodi[0] = 0xFF;
 700207c:	e3e06000 	mvn	r6, #0

        cctrl_func.Asi5WriteCtrlAccODI(0, asi5_accodi, 1, 1);
 7002080:	e3a02001 	mov	r2, #1
 7002084:	e59f40ac 	ldr	r4, [pc, #172]	; 7002138 <main+0xc0>
        unsigned char                asi5_accodi[2];//Länge entspricht der Anzahl der in der Anlage vorhandenen logischen Adressen
        unsigned char                asi5_odi[2];//Ausgänge die gesetzt werden sollen (Hex-Werte)
        int                                 i = 0;

        /* Access ASi5 logical Slave 1 (1 Byte / Slave) */
        asi5_accodi[0] = 0xFF;
 7002088:	e28d1010 	add	r1, sp, #16
 700208c:	e5616008 	strb	r6, [r1, #-8]!

        cctrl_func.Asi5WriteCtrlAccODI(0, asi5_accodi, 1, 1);
 7002090:	e1a03002 	mov	r3, r2
 7002094:	e5945268 	ldr	r5, [r4, #616]	; 0x268
 7002098:	e3a00000 	mov	r0, #0
 700209c:	e1a0e00f 	mov	lr, pc
 70020a0:	e12fff15 	bx	r5

        /* init timer function with 10ms ticks */
        cctrl_func.CCtrlInitTimer ( 1, timer_function );
 70020a4:	e59431a4 	ldr	r3, [r4, #420]	; 0x1a4
 70020a8:	e3a00001 	mov	r0, #1
 70020ac:	e59f1088 	ldr	r1, [pc, #136]	; 700213c <main+0xc4>

        /* init watchdog */
        //cctrl_func.CCtrlInitWdg( 10 );

    	asi5_odi[0] = 0xFF; //Hier werden die Ausgangskonfigurationen gesetzt
 70020b0:	e28d5010 	add	r5, sp, #16
        asi5_accodi[0] = 0xFF;

        cctrl_func.Asi5WriteCtrlAccODI(0, asi5_accodi, 1, 1);

        /* init timer function with 10ms ticks */
        cctrl_func.CCtrlInitTimer ( 1, timer_function );
 70020b4:	e1a0e00f 	mov	lr, pc
 70020b8:	e12fff13 	bx	r3

                /* Define data exchange for AS-i Circuit 1 and 2*/


                //Timer 1 100 * 10ms = 1sec.
                if ( ((unsigned short)(system_ticks - end_timer)) > 100)
 70020bc:	e59f707c 	ldr	r7, [pc, #124]	; 7002140 <main+0xc8>
        cctrl_func.CCtrlInitTimer ( 1, timer_function );

        /* init watchdog */
        //cctrl_func.CCtrlInitWdg( 10 );

    	asi5_odi[0] = 0xFF; //Hier werden die Ausgangskonfigurationen gesetzt
 70020c0:	e5656004 	strb	r6, [r5, #-4]!

                /* Define data exchange for AS-i Circuit 1 and 2*/


                //Timer 1 100 * 10ms = 1sec.
                if ( ((unsigned short)(system_ticks - end_timer)) > 100)
 70020c4:	e59f6078 	ldr	r6, [pc, #120]	; 7002144 <main+0xcc>
 70020c8:	e1d720b0 	ldrh	r2, [r7]
 70020cc:	e1d630b0 	ldrh	r3, [r6]
 70020d0:	e0633002 	rsb	r3, r3, r2
 70020d4:	e1a03803 	lsl	r3, r3, #16
 70020d8:	e3530719 	cmp	r3, #6553600	; 0x640000
 70020dc:	9a000007 	bls	7002100 <main+0x88>
                {
                        end_timer = system_ticks;
 70020e0:	e1c620b0 	strh	r2, [r6]
                        cctrl_func.Asi5WriteASi5Odi(0, &asi5_odi[0], 1, 1);
 70020e4:	e3a02001 	mov	r2, #1
 70020e8:	e5948340 	ldr	r8, [r4, #832]	; 0x340
 70020ec:	e3a00000 	mov	r0, #0
 70020f0:	e1a01005 	mov	r1, r5
 70020f4:	e1a03002 	mov	r3, r2
 70020f8:	e1a0e00f 	mov	lr, pc
 70020fc:	e12fff18 	bx	r8
                }

                /* to check Cycletime */
                cctrl_func.CCtrlEvalCycletime();
 7002100:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
 7002104:	e1a0e00f 	mov	lr, pc
 7002108:	e12fff13 	bx	r3

                /*read flags if we should stop control*/
                cctrl_func.CCtrlReadFlags( &ctrl_flags );
 700210c:	e59431c0 	ldr	r3, [r4, #448]	; 0x1c0
 7002110:	e28d0007 	add	r0, sp, #7
 7002114:	e1a0e00f 	mov	lr, pc
 7002118:	e12fff13 	bx	r3
                if ( !( ctrl_flags & CCTRL_FLAG_RUN ) )
 700211c:	e5dd3007 	ldrb	r3, [sp, #7]
 7002120:	e3130001 	tst	r3, #1
 7002124:	1affffe7 	bne	70020c8 <main+0x50>
                {
                        return 1;
                }

        }
}
 7002128:	e3a00001 	mov	r0, #1
 700212c:	e28dd010 	add	sp, sp, #16
 7002130:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 7002134:	e12fff1e 	bx	lr
 7002138:	07000000 	.word	0x07000000
 700213c:	07002060 	.word	0x07002060
 7002140:	07002148 	.word	0x07002148
 7002144:	0700214a 	.word	0x0700214a
