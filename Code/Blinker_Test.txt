
//===Includes========================================================
#include "control.h"
#include "control_io.h"


//===Zaehler initialisieren==========================================

static unsigned short system_ticks;
static unsigned short end_timer;

static void timer_function(void) {                  //diese Funktion wird regelmäßig automatisch aufgerufen
  system_ticks++;  // Wird alle 10 ms inkrementiert
}


//===Main-Funktion und Initialisierungen=============================
int main(void) {
  AASiProcessData odi[2];   //für zwei Kreise
  AASiProcessData idi[2];
  AASiEcFlags ecflags;
  unsigned char ctrl_flags;

  // Timer starten mit 10 ms Tick
  cctrl_func.CCtrlInitTimer(10, timer_function);

  // Alle Outputs zuerst ausschalten
  odi[0][0] = 0x00;

  // Zustand: Output 0 an / 1 aus = 1, Output 0 aus / 1 an = 0
  int toggle_state = 0;

    for(;;) {
    // ASi Daten austauschen
    cctrl_func.AASiDataExchange(0, odi[0], idi[0], &ecflags);

    // Alle 100 Ticks = 1 Sekunde
    if ((system_ticks - end_timer) > 100) {

      if (toggle_state == 0) 
      {
        write_bit(odi[0], 1, 0, 1);  // Output 0 AN
        write_bit(odi[0], 1, 1, 0);  // Output 1 AUS
        toggle_state = 1;
      } 
      else 
      {
        write_bit(odi[0], 1, 0, 0);  // Output 0 AUS
        write_bit(odi[0], 1, 1, 1);  // Output 1 AN
        toggle_state = 0;
      }

      end_timer = system_ticks;  // Zeit merken
    }

    // Zykluszeit auswerten (optional)
    cctrl_func.CCtrlEvalCycletime();

    // Prüfen, ob das Programm gestoppt werden soll
    cctrl_func.CCtrlReadFlags(&ctrl_flags);
    if (!(ctrl_flags & CCTRL_FLAG_RUN)) return 1;
  }
}
