
.release/control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .funcarea     00000394  07000000  07000000  00008000  2**2
                  ALLOC
  1 .text         000001ec  07002000  07002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  070021ec  070021ec  000021ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000000  070021ec  070021ec  000021ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000004  070021ec  070021ec  000021ec  2**1
                  ALLOC
  5 .debug_info   0000481f  00000000  00000000  000021ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003aa  00000000  00000000  00006a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_loc    00000054  00000000  00000000  00006db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000048  00000000  00000000  00006e09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00006e51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   000000ec  00000000  00000000  00006e79  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002a5d  00000000  00000000  00006f65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .comment      00000030  00000000  00000000  000099c2  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 0000002e  00000000  00000000  000099f2  2**0
                  CONTENTS, READONLY
 14 .debug_frame  0000007c  00000000  00000000  00009a20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

07002000 <start_vector>:
 7002000:	08 20 00 07 5c 11 00 00                             . ..\...

07002008 <start_up>:
/*-------------------------------------------------------------------*
 *  public functions                                                 *
 *-------------------------------------------------------------------*/

static void start_up ( void )
{
 7002008:	e92d4008 	push	{r3, lr}
 700200c:	e59f2038 	ldr	r2, [pc, #56]	; 700204c <start_up+0x44>

	/*	initialize the 'data' segment with values from flash
	 */

	src = &__etext;
	dst = &__data_start;
 7002010:	e59f3038 	ldr	r3, [pc, #56]	; 7002050 <start_up+0x48>

	while (dst < &__edata)
 7002014:	e59f1038 	ldr	r1, [pc, #56]	; 7002054 <start_up+0x4c>
 7002018:	e1530001 	cmp	r3, r1
	{
		*dst = *src;
 700201c:	34920004 	ldrcc	r0, [r2], #4
 7002020:	34830004 	strcc	r0, [r3], #4
 7002024:	3afffffb 	bcc	7002018 <start_up+0x10>

	dst = &__bss_start__;

	while (dst < &__bss_end__)
	{
		*dst = 0;
 7002028:	e3a01000 	mov	r1, #0
 700202c:	e59f3024 	ldr	r3, [pc, #36]	; 7002058 <start_up+0x50>
	/*	initialize the 'bss' segment with zero
	 */

	dst = &__bss_start__;

	while (dst < &__bss_end__)
 7002030:	e59f2024 	ldr	r2, [pc, #36]	; 700205c <start_up+0x54>
 7002034:	e1530002 	cmp	r3, r2
	{
		*dst = 0;
 7002038:	34831004 	strcc	r1, [r3], #4
 700203c:	3afffffc 	bcc	7002034 <start_up+0x2c>
		dst++;
	}

	main ();
 7002040:	eb00000c 	bl	7002078 <main>
}
 7002044:	e8bd4008 	pop	{r3, lr}
 7002048:	e12fff1e 	bx	lr
 700204c:	070021ec 	.word	0x070021ec
 7002050:	070021ec 	.word	0x070021ec
 7002054:	070021ec 	.word	0x070021ec
 7002058:	070021ec 	.word	0x070021ec
 700205c:	070021f0 	.word	0x070021f0

07002060 <timer_function>:
 *-------------------------------------------------------------------*/

static void timer_function ( void )
{
	/* timer interrupt every 10 ms */
	system_ticks++;
 7002060:	e59f200c 	ldr	r2, [pc, #12]	; 7002074 <timer_function+0x14>
 7002064:	e1d230b0 	ldrh	r3, [r2]
 7002068:	e2833001 	add	r3, r3, #1
 700206c:	e1c230b0 	strh	r3, [r2]
 7002070:	e12fff1e 	bx	lr
 7002074:	070021ec 	.word	0x070021ec

07002078 <main>:
/*-------------------------------------------------------------------*
 *  public functions                                                 *
 *-------------------------------------------------------------------*/

int main ( void )
{
 7002078:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	//initialization of the Debugger
	cctrl_func.CCtrlBreakpoint();
 700207c:	e59f4154 	ldr	r4, [pc, #340]	; 70021d8 <main+0x160>
/*-------------------------------------------------------------------*
 *  public functions                                                 *
 *-------------------------------------------------------------------*/

int main ( void )
{
 7002080:	e24dd0b0 	sub	sp, sp, #176	; 0xb0
	//initialization of the Debugger
	cctrl_func.CCtrlBreakpoint();
 7002084:	e59431d0 	ldr	r3, [r4, #464]	; 0x1d0
 7002088:	e1a0e00f 	mov	lr, pc
 700208c:	e12fff13 	bx	r3
	AASiProcessData 	idi[2];
	AASiCtrlAccODI 		acc_odi;
	AASiEcFlags 		ecflags;

	/* We want to access all ASi-3 odis */
	for (i=0;i<32;i++)
 7002090:	e3a03000 	mov	r3, #0
	{
		acc_odi[i] = 0xFF;	
 7002094:	e3e02000 	mvn	r2, #0
 7002098:	e28d1010 	add	r1, sp, #16
 700209c:	e7c32001 	strb	r2, [r3, r1]
	AASiProcessData 	idi[2];
	AASiCtrlAccODI 		acc_odi;
	AASiEcFlags 		ecflags;

	/* We want to access all ASi-3 odis */
	for (i=0;i<32;i++)
 70020a0:	e2833001 	add	r3, r3, #1
 70020a4:	e3530020 	cmp	r3, #32
 70020a8:	1afffffa 	bne	7002098 <main+0x20>
	{
		acc_odi[i] = 0xFF;	
	}
	cctrl_func.AASiWriteCtrlAccODI ( 0, acc_odi, 0, 64 );
 70020ac:	e3a00000 	mov	r0, #0
 70020b0:	e5945198 	ldr	r5, [r4, #408]	; 0x198
 70020b4:	e1a02000 	mov	r2, r0
 70020b8:	e3a03040 	mov	r3, #64	; 0x40
 70020bc:	e1a0e00f 	mov	lr, pc
 70020c0:	e12fff15 	bx	r5

	//clean all odis
	for (i=0;i<32;i++)
 70020c4:	e3a03000 	mov	r3, #0
	{
		odi[0][i] = 0x00;
 70020c8:	e1a02003 	mov	r2, r3
 70020cc:	e28d5030 	add	r5, sp, #48	; 0x30
 70020d0:	e7c32005 	strb	r2, [r3, r5]
		acc_odi[i] = 0xFF;	
	}
	cctrl_func.AASiWriteCtrlAccODI ( 0, acc_odi, 0, 64 );

	//clean all odis
	for (i=0;i<32;i++)
 70020d4:	e2833001 	add	r3, r3, #1
 70020d8:	e3530020 	cmp	r3, #32
 70020dc:	1afffffb 	bne	70020d0 <main+0x58>
	{
		odi[0][i] = 0x00;
	}

	/* init timer function with 10ms ticks */
    cctrl_func.CCtrlInitTimer ( 10, timer_function );
 70020e0:	e59431a4 	ldr	r3, [r4, #420]	; 0x1a4
 70020e4:	e3a0000a 	mov	r0, #10
 70020e8:	e59f10ec 	ldr	r1, [pc, #236]	; 70021dc <main+0x164>
 70020ec:	e1a0e00f 	mov	lr, pc
 70020f0:	e12fff13 	bx	r3
		/* trigger watchdog */
		//cctrl_func.CCtrlTriggerWdg();

		 /* Define data exchange for AS-i Circuit 1 and 2*/
		 cctrl_func.AASiDataExchange(0, odi[0], idi[0], &ecflags);
		 cctrl_func.AASiDataExchange(1, odi[1], idi[1], &ecflags);
 70020f4:	e28d6090 	add	r6, sp, #144	; 0x90

		/* trigger watchdog */
		//cctrl_func.CCtrlTriggerWdg();

		 /* Define data exchange for AS-i Circuit 1 and 2*/
		 cctrl_func.AASiDataExchange(0, odi[0], idi[0], &ecflags);
 70020f8:	e5947100 	ldr	r7, [r4, #256]	; 0x100
 70020fc:	e1a01005 	mov	r1, r5
 7002100:	e28d2070 	add	r2, sp, #112	; 0x70
 7002104:	e28d300a 	add	r3, sp, #10
 7002108:	e3a00000 	mov	r0, #0
 700210c:	e1a0e00f 	mov	lr, pc
 7002110:	e12fff17 	bx	r7
		 cctrl_func.AASiDataExchange(1, odi[1], idi[1], &ecflags);
 7002114:	e5947100 	ldr	r7, [r4, #256]	; 0x100
 7002118:	e2851020 	add	r1, r5, #32
 700211c:	e1a02006 	mov	r2, r6
 7002120:	e28d300a 	add	r3, sp, #10
 7002124:	e3a00001 	mov	r0, #1
 7002128:	e1a0e00f 	mov	lr, pc
 700212c:	e12fff17 	bx	r7

		 /* read idi ASi-5 Slave logAddr 1 8I/8O */
		 len = 1;
 7002130:	e3a07001 	mov	r7, #1
		 cctrl_func.Asi5ReadASi5Idi(0, &asi5_idi[0], &len, 0);
 7002134:	e3a00000 	mov	r0, #0
 7002138:	e5948348 	ldr	r8, [r4, #840]	; 0x348
 700213c:	e28d100c 	add	r1, sp, #12
 7002140:	e28d2008 	add	r2, sp, #8
 7002144:	e1a03000 	mov	r3, r0
		 /* Define data exchange for AS-i Circuit 1 and 2*/
		 cctrl_func.AASiDataExchange(0, odi[0], idi[0], &ecflags);
		 cctrl_func.AASiDataExchange(1, odi[1], idi[1], &ecflags);

		 /* read idi ASi-5 Slave logAddr 1 8I/8O */
		 len = 1;
 7002148:	e1cd70b8 	strh	r7, [sp, #8]
		 cctrl_func.Asi5ReadASi5Idi(0, &asi5_idi[0], &len, 0);
 700214c:	e1a0e00f 	mov	lr, pc
 7002150:	e12fff18 	bx	r8

		 /* read idi ASi-5 Slave logAddr 2 16I */
		 len = 2;
 7002154:	e3a03002 	mov	r3, #2
 7002158:	e1cd30b8 	strh	r3, [sp, #8]
		 cctrl_func.Asi5ReadASi5Idi(0, &asi5_idi[1], &len, 1);
 700215c:	e28d300c 	add	r3, sp, #12
 7002160:	e0831007 	add	r1, r3, r7
 7002164:	e28d2008 	add	r2, sp, #8
 7002168:	e1a03007 	mov	r3, r7
 700216c:	e5948348 	ldr	r8, [r4, #840]	; 0x348
 7002170:	e3a00000 	mov	r0, #0
 7002174:	e1a0e00f 	mov	lr, pc
 7002178:	e12fff18 	bx	r8

		//Timer 1 100 * 10ms = 1sec.
		if ( ((unsigned short)(system_ticks - end_timer)) > 1500)
 700217c:	e59f105c 	ldr	r1, [pc, #92]	; 70021e0 <main+0x168>
 7002180:	e59f305c 	ldr	r3, [pc, #92]	; 70021e4 <main+0x16c>
 7002184:	e59f205c 	ldr	r2, [pc, #92]	; 70021e8 <main+0x170>
 7002188:	e1d300b0 	ldrh	r0, [r3]
 700218c:	e1d130b0 	ldrh	r3, [r1]
 7002190:	e0633000 	rsb	r3, r3, r0
 7002194:	e1a03803 	lsl	r3, r3, #16
 7002198:	e1520823 	cmp	r2, r3, lsr #16
		{
			end_timer = system_ticks;
		}

		/* to check Cycletime */
		cctrl_func.CCtrlEvalCycletime();
 700219c:	e59431b4 	ldr	r3, [r4, #436]	; 0x1b4
		 cctrl_func.Asi5ReadASi5Idi(0, &asi5_idi[1], &len, 1);

		//Timer 1 100 * 10ms = 1sec.
		if ( ((unsigned short)(system_ticks - end_timer)) > 1500)
		{
			end_timer = system_ticks;
 70021a0:	31c100b0 	strhcc	r0, [r1]
		}

		/* to check Cycletime */
		cctrl_func.CCtrlEvalCycletime();
 70021a4:	e1a0e00f 	mov	lr, pc
 70021a8:	e12fff13 	bx	r3

		/*read flags if we should stop control*/
		cctrl_func.CCtrlReadFlags( &ctrl_flags );
 70021ac:	e59431c0 	ldr	r3, [r4, #448]	; 0x1c0
 70021b0:	e28d0007 	add	r0, sp, #7
 70021b4:	e1a0e00f 	mov	lr, pc
 70021b8:	e12fff13 	bx	r3
		if ( !( ctrl_flags & CCTRL_FLAG_RUN ) )
 70021bc:	e5dd3007 	ldrb	r3, [sp, #7]
 70021c0:	e3130001 	tst	r3, #1
 70021c4:	1affffcb 	bne	70020f8 <main+0x80>
		{
			return 1;
		}
	
	}
}
 70021c8:	e3a00001 	mov	r0, #1
 70021cc:	e28dd0b0 	add	sp, sp, #176	; 0xb0
 70021d0:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 70021d4:	e12fff1e 	bx	lr
 70021d8:	07000000 	.word	0x07000000
 70021dc:	07002060 	.word	0x07002060
 70021e0:	070021ee 	.word	0x070021ee
 70021e4:	070021ec 	.word	0x070021ec
 70021e8:	000005dc 	.word	0x000005dc
