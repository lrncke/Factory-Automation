
/*-------------------------------------------------------------------*
 *                                                                   *
 *                       Bihl+Wiedemann GmbH                         *
 *                                                                   *
 *                                                                   *
 *       project: AS-i C-Control                                     *
 *   module name: control.h                                          *
 *        author: Christian Kraus                                    *
 *          date: 2010-08-04                                         *
 *                                                                   *
 *      RCS info:                                                    *
 *         $Date: 2010/12/03 17:27:04 $
 *     $Revision: 1.1 $
 */
/*! \file
 *	\brief	
 *
 */
/*                                                                   *
 *-------------------------------------------------------------------*/

#ifndef _CCONTROL_H_
#define _CCONTROL_H_

/*-------------------------------------------------------------------*
 *  global definitions                                               *
 *-------------------------------------------------------------------*/

/*  Execution Control flags
 */
#define ASI_CONFIG_OK               0x0001			/* there is no configuration error */
#define ASI_LDS0                    0x0002			/* a slave with address zero is existing */
#define ASI_AUTO_ADDRESS_ASSIGN     0x0004			/* automatic programming is activated */
#define ASI_AUTO_ADDRESS_AVAILABLE  0x0008			/* automatic programming is avalible */
#define ASI_CONFIGURATION_ACTIVE    0x0010			/* the configuration mode is active */
#define ASI_NORMAL_OPERATION_ACTIVE 0x0020			/* the normal operation mode is active */
#define ASI_APF                     0x0040			/* ASI has power fail */
#define ASI_OFFLINE_READY           0x0080			/* the offline phase is active */
#define ASI_PERIPHERY_OK            0x0100			/* there is no peripheral fault */

/*  Fault detector Flags
 */
#define	ASI_MASK_24V_ERROR		    0x08          	/* 24V error (retundant) */
#define	ASI_EFLT			    	0x10          	/* earth fault */
#define	ASI_OVERVOLTAGE	    		0x20          	/* overvoltage */
#define	ASI_NOIS			    	0x40          	/* noise */
#define	ASI_DUPLICATE_ADR      		0x80			/* duplicate adr */

/*  Host Interface flags
 */
#define ASI_DATA_EXCHANGE_ACTIVE    0x01			/* bit reset: data exchange with the slaves is locked */
#define ASI_OFFLINE                 0x02			/* bit set: master is set to offline state */
#define ASI_AUTO_ADDRESS_ENABLE     0x04			/* bit set: automatic programming is allowed */

/* error codes for the "write extended ID code 1" function
 */
/* error codes for the "address slave" function
 */
#define ASI_NOK 					0x00			/*	error						*/
#define ASI_OK  					0x01			/*	no error					*/
#define ASI_ERR_SND 				0x02 		    /*  Slave (adr1) Not Detected   */
#define ASI_ERR_SD0 				0x03   		  	/*  Slave 0 Detected            */
#define ASI_ERR_SD2 				0x04   		  	/*  Slave (adr2) Detected       */
#define ASI_ERR_DE  				0x05   		  	/*  Delete Error                */
#define ASI_ERR_SE  				0x06   		 	/*  Set Error                   */
#define ASI_ERR_AT  				0x07 			/*  Adress stored temporarily   */
#define ASI_ERR_APF 				0x08 			/*  AS-Interface power failure  */


/*  Bitcodes for ASiCtrlFlags
 */
#define CCTRL_FLAG_RUN         		0x01			/* bit set: start control program */
#define CCTRL_FLAG_RESET       		0x02			/* bit set: reset control program */
#define CCTRL_FLAG_AUTO_START  		0x08			/* bit set: automatic program start */
#define CCTRL_FLAG_BREAK_ENABLE  	0x40			/* bit set: Breakpoints enable */
#define CCTRL_FLAG_ACTIVE      		0x80			/* bit set: a program is running */

/*  GDB Defines
 *
 */
 #define _stringify1(__arg) #__arg
#define _stringify(__arg) _stringify1(__arg)
#define HAL_BREAKINST_ARM          0xE7FFDEFE
#define HAL_BREAKINST_ARM_SIZE     4


#define HAL_BREAKINST            HAL_BREAKINST_ARM
#define HAL_BREAKINST_SIZE       HAL_BREAKINST_ARM_SIZE
#define HAL_BREAKINST_TYPE       uint32_t

#define HAL_BREAKPOINT(_label_)                   \
asm volatile (" .globl  " #_label_ ";"            \
              #_label_":"                         \
              " .word " _stringify(HAL_BREAKINST_ARM) \
    );


//extern unsigned int __arm_breakinst;

/*-------------------------------------------------------------------*
 *  type declarations                                                *
 *-------------------------------------------------------------------*/

typedef unsigned char    AASiProcessData [32];
typedef unsigned char    AASiCtrlAccODI  [32];
typedef unsigned char    AASiCtrlAccAODI [16];
typedef unsigned char    AASiSlaveList [8];
typedef unsigned char    AASiHiFlags;
typedef unsigned short   AASiEcFlags;
typedef unsigned char    AASiSlaveData;
typedef unsigned char    AASiSlaveAddr;
typedef unsigned short   AASiConfigData;
typedef unsigned char    AASiErrorCounters [64];
typedef signed short     AASi16BitData [4];

typedef struct 
{
    AASiConfigData PCD [64];
    AASiSlaveData PP [64];
} 
AASiConfig;

typedef struct
{
	unsigned char DataLen;
	unsigned char Opcode;
	unsigned char Circuit;
	unsigned char Data [36];
} 
AASiMbRequestType;

typedef struct
{
	unsigned char DataLen;
	unsigned char Opcode;
	unsigned char Result;
	unsigned char Data [36];
} 
AASiMbResponseType;



typedef struct 
{
	/*********************************************************************
	 *
	 *  error = AASiDataExchange (Circuit, ODI, IDI, &EcFlags);
	 *
	 *  description:
	 *		exchange of ASi Slave data and reading of the execution control flags.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		ODI: 32 bytes output data to the slaves (output data image).
	 *			Every slave uses one nibble of a byte. The format is as follows:
	 *			Byte  0, low  nibble: data of slave  0/0A
	 *			Byte  0, high nibble: data of slave  1/1A
	 *			...
	 *			Byte 15, low  nibble: data of slave 30/30A
	 *			Byte 15, high nibble: data of slave 31/31A
	 *			Byte 16, low  nibble: data of slave  0B
	 *			Byte 16, high nibble: data of slave  1B
	 *			...
	 *			Byte 31, low  nibble: data of slave 30B
	 *			Byte 31, high nibble: data of slave 31B
	 *
	 *	returns:
	 *		IDI: 32 bytes input data from the slave (input data image).
	 *			The format is the same is in ODI.
	 *
	 *		EcFlags: Execution control flags (2 bytes) of the AS-Interface Master.
	 */
	int (*AASiDataExchange) (unsigned char Circuit, AASiProcessData ODI, AASiProcessData IDI, AASiEcFlags *EcFlags);

	/*********************************************************************
	 *
	 *  error = AASiReadIDI (Circuit, IDI, First, Amount, &EcFlags);
	 *
	 *  description:
	 *		read the input data of specific slave and the execution control flags.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		First: Index of the first slave to get data from (0..63)
	 *		Amount: Number of slaves to get data from. (1..64)
	 *
	 *	returns:
	 *		IDI: 32 bytes input data of the slaves (input data image).
	 *			Every slave uses one nibble of a byte. Unused bytes are set to zero.
	 *			The format is as follows:
	 *			Byte 0, low  nibble: Slave 'First' data
	 *			Byte 0, high nibble: Slave 'First'+1 data
	 *			...
	 *
	 *		EcFlags: Execution control flags (2 bytes) of the ASi Master.
	 */
	int (*AASiReadIDI) (unsigned char Circuit, AASiProcessData IDI, AASiSlaveAddr First, unsigned char Amount, AASiEcFlags *EcFlags);

	/*****************************************************************
	 *
	 *  error = AASiWriteODI (Circuit, ODI, First, Amount);
	 *
	 *  description:
	 *		Writes output data to specific slaves.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		ODI: 32 bytes of output data (output data image).
	 *			Every slave uses one nibble of a byte.
	 *			The format is as follows:
	 *			Byte  0, low  nibble: Slave  'First' data
	 *			Byte  0, high nibble: Slave  'First'+1 data
	 *			...
	 *
	 *		First: Index of the first slave to send data to (0..63)
	 *
	 *		Amount: Number of slaves to send data to. (1..64)
	 *
	 *	returns:
	 */
	int (*AASiWriteODI) (unsigned char Circuit, AASiProcessData ODI, AASiSlaveAddr First, unsigned char Amount);

	/************************************************************
	 *
	 *  error = AASiReadODI (Circuit, ODI);
	 *
	 *  description:
	 *		Read back the actual output data from the AS-Interface master.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *  returns:
	 *		ODI: 32 bytes output data to the slaves (output data image).
	 *			Every slave uses one nibble of a byte. The format is as follows:
	 *			Byte  0, low  nibble: data of slave  0/0A
	 *			Byte  0, high nibble: data of slave  1/1A
	 *			...
	 *			Byte 15, low  nibble: data of slave 30/30A
	 *			Byte 15, high nibble: data of slave 31/31A
	 *			Byte 16, low  nibble: data of slave  0B
	 *			Byte 16, high nibble: data of slave  1B
	 *			...
	 *			Byte 31, low  nibble: data of slave 30B
	 *			Byte 31, high nibble: data of slave 31B
	 *          
	 */
	int (*AASiReadODI) (unsigned char Circuit, AASiProcessData ODI);

	/**************************************************************
	 *
	 *  error = AASiWritePP (Circuit, Address, PP);
	 *
	 *  description:
	 *		Set the permanent parameters of one slave
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Address: Address of slave to set the parameters for (1..31, 33..63).
	 *		PP:	Permanent parameters to set (low nibble).
	 *
	 *  returns:
	 */
	int (*AASiWritePP) (unsigned char Circuit, AASiSlaveAddr Address, AASiSlaveData PP);

	/***************************************************************
	 *
	 *  error = AASiReadPP (Circuit, Address, &PP);
	 *
	 *  description:
	 *		Read the permanent parameters of one slave
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Address: Address of slave to get the parameters from (1..31, 33..63).
	 *
	 *  returns:
	 *		PP: Permanent parameters of the slave (low nibble)
	 */
	int (*AASiReadPP) (unsigned char Circuit, AASiSlaveAddr Address, AASiSlaveData *PP);
	                                                 
	/*********************************************************************
	 *
	 *  error = AASiSendParameter (Circuit, Address, PI, &Ret);
	 *
	 *  description:
	 *		Send parameters to one slave.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Address: Address of slave to send parameters to (1..31, 33..63).
	 *		PI: Parameters to send (low nibble)
	 *
	 *	returns:
	 *		Ret: On error PI is returned inverted.
	 */
	int (*AASiSendParameter) (unsigned char Circuit, AASiSlaveAddr Address, AASiSlaveData PI, AASiSlaveData *Return);

	/*********************************************************************
	 *
	 *  error = AASiReadPI (Circuit, Address, &PI);
	 *
	 *  description:
	 *		Read the actual parameters of one slave
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Address: Address of slave to read the parameters from (1..31, 33..63).
	 *
	 *	returns:
	 *		PI: Parameters of the slave. (low nibble).
	 */
	int (*AASiReadPI) (unsigned char Circuit, AASiSlaveAddr Address, AASiSlaveData *PI);

	/*********************************************************************
	 *
	 *  error = AASiStorePI (Circuit);
	 *
	 *  description:
	 *		Store the actual slave parameters as permanent parameters.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *	returns:
	 */
	int (*AASiStorePI) (unsigned char Circuit);

	/*************************************************************
	 *
	 *  error = AASiReadDuplicateAdrList (Circuit, Address, SingleTransfer, Request, Response);
	 *
	 *  description:
	 *		Read List of duplicate address
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		DpAdrList: List of duplicate address
	 *
	 *  returns:
	 *	
	 */
	int (*AASiReadDuplicateAdrList) (unsigned char Circuit, AASiSlaveList *DpAdrList);

	/*************************************************************
	 *
	 *  error = AASiReadFaultDetector (Circuit, &pucFaultDetectorActiv, &pucFaultDetectorHistoric);
	 *
	 *  description:
	 *		Read Overvoltage, Nois, EFLT, Duplicate adr.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		pucFaultDetectorActiv:    active fault detector
	 *		pucFaultDetectorHistoric: historic fault detector
	 *
	 *  returns:
	 *	
	 */
	int (*AASiReadFaultDetector) (unsigned char Circuit, unsigned char  *pucFaultDetectorActiv, unsigned char  *pucFaultDetectorHistoric);

	/*********************************************************************
	 *
	 *  error = AASiWritePCD (Circuit, Address, PCD);
	 *
	 *  description:
	 *		Write the projected configuration of one slave.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Address: Address of the slave to write the configuration to (1..31, 33..63).
	 *		PCD:	 Configuration to write.
	 *	             Byte 0, low nibble: I/O configuration
	 *	             Byte 0, high nibble: slave ID
	 *	             Byte 1, low nibble: extended ID1
	 *	             Byte 1, high nibble: extended ID2
	 *
	 *  returns:
	 */
	int (*AASiWritePCD) (unsigned char Circuit, AASiSlaveAddr Address, AASiConfigData PCD);

	/************************************************************************
	 *
	 *  error = AASiReadPCD (Circuit, Address, &PCD);
	 *
	 *  description:
	 *		read the projected configuration of one slave.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Address: Address of slave to read the configuration from (1..31, 33..63).
	 *
	 *  returns:
	 *		PCD: Configuration of the slave
	 *	             Byte 0, low nibble: I/O configuration
	 *	             Byte 0, high nibble: slave ID
	 *	             Byte 1, low nibble: extended ID1
	 *	             Byte 1, high nibble: extended ID2
	 */
	int (*AASiReadPCD) (unsigned char Circuit, AASiSlaveAddr Address, AASiConfigData *PCD);

	/*************************************************************************
	 *
	 *  error = AASiStoreCDI (Circuit);
	 *
	 *  description:
	 *		Store the actual configuration as permanent configuration.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *  returns:
	 */
	int (*AASiStoreCDI) (unsigned char Circuit);

	/***********************************************************************
	 *
	 *  error = AASiReadCDI (Circuit, Address, &CDI);
	 *
	 *  description:
	 *		Read the actual configuration of one slave.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Address: Address of slave to get the configuration from (0..31, 33..63).
	 *
	 *  returns:
	 *		CDI: Configuration of the slave
	 *	             Byte 0, low nibble: I/O configuration
	 *	             Byte 0, high nibble: slave ID
	 *	             Byte 1, low nibble: extended ID1
	 *	             Byte 1, high nibble: extended ID2
	 */
	int (*AASiReadCDI) (unsigned char Circuit, AASiSlaveAddr Address, AASiConfigData *CDI);

	/*********************************************************************
	 *
	 *  error = AASiWriteExtID1 (Circuit, ID1);
	 *
	 *  description:
	 *		Write the extended ID code 1 of slave 0
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		ID1: extended ID code 1
	 *
	 *  returns:
	 *		This function returns special error codes reporting
	 *		the reason of operation failure.
	 */
	int (*AASiWriteExtID1) (unsigned char Circuit, AASiSlaveData ID1);

	/*****************************************************************
	 *
	 *  error = AASiWriteLPS (Circuit, LPS);
	 *
	 *  description:
	 *		Write list of projected slave.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		LPS: 8 bytes projected slave list.
	 *			Every bit in the LPS corresponds to one slave after the following scheme:
	 *			Bit 0:	Slave 0/0A - can not be set!
	 *			Bit 1:	Slave 1/1A
	 *			...
	 *			Bit31:	Slave 31/31A
	 *			Bit32 :	Slave 0B - can not be set!
	 *			Bit33:	Slave 1B
	 *			...
	 *			Bit63:	Slave 31B
	 *			The slave is projected if the bit is set.
	 * 
	 * 	returns:
	 */
	int (*AASiWriteLPS) (unsigned char Circuit, AASiSlaveList LPS);
	                            
	/*********************************************************************
	 *
	 *  error = AASiReadLPS (Circuit, &LPS);
	 *
	 *  description:
	 *		Read list of projected slaves.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *	returns:
	 *		LPS: 8 bytes projected slave list.
	 *			Bit 0:	Slave 0/0A - can not be set!
	 *			Bit 1:	Slave 1/1A
	 *			...
	 *			Bit31:	Slave 31/31A
	 *			Bit32 :	Slave 0B - can not be set!
	 *			Bit33:	Slave 1B
	 *			...
	 *			Bit63:	Slave 31B
	 *			The slave is projected if the bit is set.
	 */
	int (*AASiReadLPS) (unsigned char Circuit, AASiSlaveList *LPS);
	                            
	/*****************************************************************
	 *
	 *  error = AASiReadLAS (Circuit, &LAS);
	 *
	 *  description:
	 *		Read list of activated slaves.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *  returns:
	 *		LAS: 8 bytes activated slave list.
	 *			Bit 0:	Slave 0/0A
	 *			Bit 1:	Slave 1/1A
	 *			...
	 *			Bit31:	Slave 31/31A
	 *			Bit32 :	Slave 0B
	 *			Bit33:	Slave 1B
	 *			...
	 *			Bit63:	Slave 31B
	 *			The slave is activated if the bit is set.
	 */
	int (*AASiReadLAS) (unsigned char Circuit, AASiSlaveList *LAS);
	                            
	/****************************************************************
	 *
	 *  error = AASiReadLDS (Circuit, &LDS);
	 *
	 *  description:
	 *		Read list of detected slaves.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *  returns:
	 *		LDS: 8 bytes detected slave list.
	 *			Every bit in the LDS corresponds to one slave after the following scheme:
	 *			Bit 0:	Slave 0/0A
	 *			Bit 1:	Slave 1/1A
	 *			...
	 *			Bit31:	Slave 31/31A
	 *			Bit32 :	Slave 0B
	 *			Bit33:	Slave 1B
	 *			...
	 *			Bit63:	Slave 31B
	 *			The slave is detected if the bit is set.
	 */
	int (*AASiReadLDS) (unsigned char Circuit, AASiSlaveList *LDS);
	                            
	/****************************************************************
	 *
	 *  error = AASiReadLCS (Circuit, &LCS);
	 *
	 *  description:
	 *		Read list of corrupted slaves. Every read resets the list.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *  returns:
	 *		LCS: 8 bytes corrupted slave list.
	 *			Every bit in the LCS corresponds to one slave after the following scheme:
	 *			Bit 0:	Slave 0/0A can not be corrupted, AS-Interface power fail indication instead
	 *			Bit 1:	Slave 1/1A
	 *			...
	 *			Bit31:	Slave 31/31A
	 *			Bit32 :	Slave 0B can not be corrupted.
	 *			Bit33:	Slave 1B
	 *			...
	 *			Bit63:	Slave 31B
	 *			The slave is corrupted if the bit is set.
	 */
	int (*AASiReadLCS) (unsigned char Circuit, AASiSlaveList *LCS);
	                            
	/*****************************************************************
	 *
	 *  error = AASiWriteLOS (Circuit, LOS);
	 *
	 *  description:
	 *		Write list of slave addresses which trigger offline on config error.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		LOS: 8 bytes slave addresses list.
	 *			Every bit in the LOS corresponds to one slave after the following scheme:
	 *			Bit 0:	Slave 0/0A
	 *			Bit 1:	Slave 1/1A
	 *			...
	 *			Bit31:	Slave 31/31A
	 *			Bit32 :	Slave 0B
	 *			Bit33:	Slave 1B
	 *			...
	 *			Bit63:	Slave 31B
	 *			The slave is projected if the bit is set.
	 * 
	 * 	returns:
	 */
	int (*AASiWriteLOS) (unsigned char Circuit, AASiSlaveList LOS);
	                            
	/****************************************************************
	 *
	 *  error = AASiReadLOS (Circuit, &LOS);
	 *
	 *  description:
	 *		Write list of slave addresses which trigger offline on config error.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *  returns:
	 *		LOS: 8 bytes slave addresses list.
	 *			Every bit in the LOS corresponds to one slave after the following scheme:
	 *			Bit 0:	Slave 0/0A
	 *			Bit 1:	Slave 1/1A
	 *			...
	 *			Bit31:	Slave 31/31A
	 *			Bit32 :	Slave 0B
	 *			Bit33:	Slave 1B
	 *			...
	 *			Bit63:	Slave 31B
	 *			The slave is detected if the bit is set.
	 */
	int (*AASiReadLOS) (unsigned char Circuit, AASiSlaveList *LOS);
	                            
	/****************************************************************
	 *
	 *  error = AASiReadLPF (Circuit, &LPF);
	 *
	 *  description:
	 *		Read list of slave addresses with peripheral fault.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *  returns:
	 *		LPF: 8 bytes slave addresses list.
	 *			Every bit in the LOS corresponds to one slave after the following scheme:
	 *			Bit 0:	Slave 0/0A
	 *			Bit 1:	Slave 1/1A
	 *			...
	 *			Bit31:	Slave 31/31A
	 *			Bit32:	Slave 0B
	 *			...
	 *			Bit63:	Slave 31B
	 *			The slave has a peripheral fault if the bit is set.
	 */
	int (*AASiReadLPF) (unsigned char Circuit, AASiSlaveList *LPF);
	                            
	/**********************************************************************
	 *
	 *  error = AASiReadEcFlags (Circuit, &EcFlags);
	 *
	 *  description:
	 *		Read execution control flags.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *  returns:
	 *		EcFlags: Two bytes execution control flags.
	 */
	int (*AASiReadEcFlags) (unsigned char Circuit, AASiEcFlags *EcFlags);
	                            
	/********************************************************************
	 *
	 *  error = AASiSetConfigMode (Circuit, Mode);
	 *
	 *  description:
	 *		Set ASi Master to configuration or protected operation mode.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Mode: 1 = Configuration mode, 0 = Protected operation mode.
	 *
	 *  returns:
	 */
	int (*AASiSetConfigMode) (unsigned char Circuit, unsigned char Mode);

	/*******************************************************************
	 *
	 *  error = AASiWriteHiFlags (Circuit, HiFlags);			
	 *
	 *  description:
	 *		Write host interface flags to the ASi Master.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		HiFlags: Host interface flags to write.
	 *
	 *  returns:
	 */
	int (*AASiWriteHiFlags) (unsigned char Circuit, AASiHiFlags HiFlags);

	/*******************************************************************
	 *
	 *  error = AASiReadHiFlags (Circuit, &HiFlags);
	 *
	 *  description:
	 *		Read acatual host interface flags from the master.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *  returns:
	 *		HiFlags: host interface flags (one byte).
	 */
	int (*AASiReadHiFlags) (unsigned char Circuit, AASiHiFlags *HiFlags);
	                            
	/****************************************************************
	 *
	 *  error = AASiAddressSlave (Circuit, Addr1, Addr2);
	 *
	 *  description:
	 *		Change the address of one slave.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Addr1: Old slave address.
	 *		Addr2: New slave address.
	 *
	 *  returns:
	 *		This function returns special error codes reporting
	 *		the reason of operation failure.
	 */
	int (*AASiAddressSlave) (unsigned char Circuit, AASiSlaveAddr OldAddress, AASiSlaveAddr NewAddress);
	                            
	/*************************************************************
	 *
	 *  error = AASiExecuteCommand (Circuit, Address, Request, &Response);
	 *
	 *  description:
	 *		Send directly an AS-Interface command.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Address: Slave address to send command to.
	 *		Request: AS-Interface request command.
	 *
	 *  returns:
	 *		Response: AS-Interface response.
	 */
	int (*AASiExecuteCommand) (unsigned char Circuit, AASiSlaveAddr Address, AASiSlaveData Request, AASiSlaveData *Response);

	/*********************************************************************
	 *
	 *  error = AASiReadAllConfig (Circuit, Configurations);
	 *
	 *  description:
	 *		Read all the configuration data (i.e. LPS, PP[] and PCD[]) for 
	 *		all AS-Interface slaves of all AS-Interface circuits of the connected master.
	 *
	 *  parameters:
	 *		Circuit:        AS-i Master circuit
	 *		Configurations:	vector to hold the configuration data.
	 *
	 *	returns:
	 *		the configuration data in Configurations[].
	 */
	int (*AASiReadAllConfig) (unsigned char Circuit, AASiConfig *Configurations );

	/*********************************************************************
	 *
	 *  error = AASiWriteAllConfig (Circuit, Configurations);
	 *
	 *  description:
	 *		Write all the configuration data (i.e. LPS, PP[] and PCD[]) for
	 *		all AS-Interface slaves of all AS-Interface circuits of the connected master.
	 *
	 *  parameters:
	 *		Circuit:        AS-i Master circuit
	 *		Configurations:	vector holding the configuration data to be written.
	 *
	 *	returns:
	 */
	int (*AASiWriteAllConfig) (unsigned char Circuit, AASiConfig Configurations);

	/*********************************************************************
	 *
	 *  error = AASiReadErrorCounters(Circuit, Counters)
	 *
	 *  description:
	 *		Read the slave error counters. Every read resets the counters.
	 *
	 *  parameters:
	 *		Circuit:        AS-i Master circuit
	 *
	 *	returns:
	 *		Counters: 64 bytes holding one error counter per slave.
	 */
	int (*AASiReadErrorCounters) (unsigned char Circuit, AASiErrorCounters Counters);

	/*************************************************************
	 *
	 *  error = AASiMailbox (Circuit, Request, Response);
	 *
	 *  description:
	 *		Generic mailbox function
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Request: structure for mailbox request
	 *      ExpResLen: expected response length (-1 == don't know)
	 *
	 *  returns:
	 *		Response: structure for mailbox response
	 */ 
	int (*AASiMailbox) (unsigned char Circuit, AASiMbRequestType Request, int ExpResLen, AASiMbResponseType *Response);

	/*********************************************************************
	 *
	 *  error = AASiWrite16BitODI (Circuit, Address, Out);
	 *
	 *  description:
	 *      writes four channels of 16bit ODI to an AS-Interface slave
	 *      with e.g. analog slave profil 7.3 or 7.4
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Address: Slave address (1..31)
	 *      Out: 4 channels of 16-Bit values
	 *           Word 0: channel 1
	 *           ...
	 *           Word 3: channel 4
	 *
	 *	returns:
	 */
	int (*AASiWrite16BitODI) (unsigned char Circuit, AASiSlaveAddr Address, AASi16BitData Out);

	/*********************************************************************
	 *
	 *  error = AASiRead16BitODI (Circuit, Address, In);
	 *
	 *  description:
	 *      reads four channels of 16bit data from an AS-Interface slave
	 *      with e.g. analog slave profil 7.3 or 7.4
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Address: Slave address (1..31)
	 *
	 *	returns:
	 *      In:  4 channels of 16-Bit values
	 *           Word 0: channel 1
	 *           ...
	 *           Word 3: channel 4
	 */
	int (*AASiRead16BitODI) (unsigned char Circuit, AASiSlaveAddr Address, AASi16BitData In);

	/*********************************************************************
	 *
	 *  error = AASiRead16BitIDI (Circuit, Address, In);
	 *
	 *  description:
	 *      reads four channels of 16bit data from an AS-Interface slave
	 *      with e.g. analog slave profil 7.3 or 7.4
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		Address: Slave address (1..31)
	 *
	 *	returns:
	 *      In:  4 channels of 16-Bit values
	 *           Word 0: channel 1
	 *           ...
	 *           Word 3: channel 4
	 */
	int (*AASiRead16BitIDI) (unsigned char Circuit, unsigned char Address, AASi16BitData In);

	/************************************************************
	 *
	 *  error = AASiReadCtrlAccODI (Circuit, ODI);
	 *
	 *  description:
	 *		Read back the actual Ctrl access data for the Ctrl output data image.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *  returns:
	 *		ODI: 32 bytes Ctrl access data.
	 *			Every slave uses one nibble of a byte. The format is as follows:
	 *			Byte  0, low  nibble: Ctrl access data of slave  0/0A
	 *			Byte  0, high nibble: Ctrl access data of slave  1/1A
	 *			...
	 *			Byte 15, low  nibble: Ctrl access data of slave 30/30A
	 *			Byte 15, high nibble: Ctrl access data of slave 31/31A
	 *			Byte 16, low  nibble: Ctrl access data of slave  0B
	 *			Byte 16, high nibble: Ctrl access data of slave  1B
	 *			...
	 *			Byte 31, low  nibble: Ctrl access data of slave 30B
	 *			Byte 31, high nibble: Ctrl access data of slave 31B
	 *          
	 */
	int  (*AASiReadCtrlAccODI)	( unsigned char Circuit, AASiCtrlAccODI ODI );

	/*****************************************************************
	 *
	 *  error = AASiWriteCtrlAccODI (Circuit, ODI, First, Amount);
	 *
	 *  description:
	 *		Writes Ctrl access data for the Ctrl output data image.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		ODI: 32 bytes of Ctrl access output data.
	 *			Every slave uses one nibble of a byte.
	 *			The format is as follows:
	 *			Byte  0, low  nibble: Slave  'First'   Ctrl access data
	 *			Byte  0, high nibble: Slave  'First'+1 Ctrl access data
	 *			...
	 *
	 *		First: Index of the first slave for Ctrl access data (0..63)
	 *
	 *		Amount: Number of slaves for Ctrl access data. (1..64)
	 *
	 *	returns:
	 */
	int  (*AASiWriteCtrlAccODI)	( unsigned char Circuit, AASiCtrlAccODI ODI, AASiSlaveAddr First, unsigned char Amount );

	/************************************************************
	 *
	 *  error = AASiReadCtrlAccAODI (Circuit, AODI);
	 *
	 *  description:
	 *		Read back the actual Ctrl access analogue data for the Ctrl analogue output data image.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *
	 *  returns:
	 *		Circuit: AS-i Master circuit
	 *		AODI: 16 bytes of Ctrl access output data.
	 *			Every slave uses one nibble of a byte.
	 *			Every analogue channel of each slave use one bit.
	 *			The format is as follows:
	 *			Byte  0, Bit 0: Slave 0   Ctrl access analogue channel 0
	 *			Byte  0, Bit 1: Slave 0   Ctrl access analogue channel 1
	 *			Byte  0, Bit 2: Slave 0   Ctrl access analogue channel 2
	 *			Byte  0, Bit 3: Slave 0   Ctrl access analogue channel 3
	 *			Byte  0, Bit 4: Slave 1   Ctrl access analogue channel 0
	 *			Byte  0, Bit 5: Slave 1   Ctrl access analogue channel 1
	 *			Byte  0, Bit 6: Slave 1   Ctrl access analogue channel 2
	 *			Byte  0, Bit 7: Slave 1   Ctrl access analogue channel 3
	 *			...
	 *          
	 */
	int  (*AASiReadCtrlAccAODI)	( unsigned char Circuit, AASiCtrlAccAODI AODI );

	/*****************************************************************
	 *
	 *  error = AASiWriteCtrlAccAODI (Circuit, AODI, First, Amount);
	 *
	 *  description:
	 *		Writes Ctrl access analogue data for the Ctrl analogue output data image.
	 *
	 *  parameters:
	 *		Circuit: AS-i Master circuit
	 *		AODI: 16 bytes of Ctrl access output data.
	 *			Every slave uses one nibble of a byte.
	 *			Every analogue channel of each slave use one bit.
	 *			The format is as follows:
	 *			Byte  0, Bit 0: Slave  'First'   Ctrl access analogue channel 0
	 *			Byte  0, Bit 1: Slave  'First'   Ctrl access analogue channel 1
	 *			Byte  0, Bit 2: Slave  'First'   Ctrl access analogue channel 2
	 *			Byte  0, Bit 3: Slave  'First'   Ctrl access analogue channel 3
	 *			Byte  0, Bit 4: Slave  'First'+1 Ctrl access analogue channel 0
	 *			Byte  0, Bit 5: Slave  'First'+1 Ctrl access analogue channel 1
	 *			Byte  0, Bit 6: Slave  'First'+1 Ctrl access analogue channel 2
	 *			Byte  0, Bit 7: Slave  'First'+1 Ctrl access analogue channel 3
	 *			...
	 *
	 *		First: Index of the first slave to send data to (0..31)
	 *
	 *		Amount: Number of slaves to send data to. (1..32)
	 *
	 *	returns:
	 */
	int  (*AASiWriteCtrlAccAODI)( unsigned char Circuit, AASiCtrlAccAODI AODI, AASiSlaveAddr First, unsigned char Amount );

	/*****************************************************************
	 *
	 *  error = CCtrlInitTimer (ticks_ms, *timer_func() );
	 *
	 *  description:
	 *		Setup Timer Interrupt Function 
	 *
	 *  parameters:
	 *		ticks_ms: timer isr periode	in ms
	 * 		timer_func: callback of the timer isr
	 *
	 *	returns:
	 */
	int  (*CCtrlInitTimer) 		( unsigned long ticks_ms, void (*timer_func)( void ) );

	/*****************************************************************
	 *
	 *  error = CCtrlDelay ( ticks_ms );
	 *
	 *  description:
	 *		Setup a delay in ms
	 *
	 *  parameters:
	 *		ticks_ms: Delay in ms
	 *
	 *	returns:
	 */
	int  (*CCtrlDelay) 			( unsigned long ticks_ms );

	/*****************************************************************
	 *
	 *  error = CCtrlInitWdg ( ticks );
	 *
	 *  description:
	 *		Initialise Control Watchdog
	 *
	 *  parameters:
	 *		ticks: Watchdog Time in 10 ms
	 *
	 *	returns:
	 */
	int  (*CCtrlInitWdg)		( unsigned long ticks );

	/*****************************************************************
	 *
	 *  error = CCtrlTriggerWdg ();
	 *
	 *  description:
	 *		Trigger Control Watchdog
	 *
	 *	returns:
	 */
	int  (*CCtrlTriggerWdg)		( void );

	/*****************************************************************
	 *
	 *  error = CCtrlEvalCycletime ();
	 *
	 *  description:		
	 *		Must be called in the Main loop to evaluate the cycletime of the Control Program
	 *
	 *	returns:
	 */
	int  (*CCtrlEvalCycletime)	( void );

	/*****************************************************************
	 *
	 *  error = CCtrlReadParameter ( *buffer, len, adr );
	 *
	 *  description:
	 *		Read Control NV Parameter
	 *
	 *  parameters:
	 *		len: length of the buffer
	 * 		adr: address of the first byte to read data from
	 *
	 *	returns:
	 *		buffer: read buffer
	 */
	int  (*CCtrlReadParameter)	( unsigned char *buffer, unsigned short len, unsigned short adr );

	/*****************************************************************
	 *
	 *  error = CCtrlWriteParameter ( *buffer, len, adr );
	 *
	 *  description:
	 *		Write Control NV Parameter
	 *
	 *  parameters:
	 *		buffer: write buffer
	 *		len: length of the buffer
	 * 		adr: address of the first byte to write data to
	 *
	 *	returns:
	 */
	int  (*CCtrlWriteParameter)	( unsigned char *buffer, unsigned short len, unsigned short adr );

	/*****************************************************************
	 *
	 *  error = CCtrlReadFlags ( *flags );
	 *
	 *  description:
	 *		Read Control Flags
	 *
	 *  parameters:
	 *
	 *	returns:
	 *  	flags: AS-i Control flags
	 */
	int  (*CCtrlReadFlags)		( unsigned char *flags );

	/*****************************************************************
	 *
	 *  error = CCtrlWriteFlags ( flags );
	 *
	 *  description:
	 *		Read Control Flags
	 *
	 *  parameters:
	 *  	flags: AS-i Control flags
	 *
	 *	returns:
	 */
	int  (*CCtrlWriteFlags)		( unsigned char  flags );

	/*****************************************************************
	 *
	 *  error = CCtrlWriteFlags ( flags );
	 *
	 *  description:
	 *		Read user defined unique control key
	 *
	 *  parameters:
	 *
	 *	returns:
	 *  	key: control key
	 */
	int  (*CCtrlReadKey)		( unsigned int *key );

	/*****************************************************************
	 *
	 *  error = CCtrlPrintf ( format, ... );
	 *
	 *  description:
	 *		Well known Printf Function
	 *
	 *  parameters:
	 *	returns:
	 */
	int  (*CCtrlPrintf)			( const char *format, ... );

	/*****************************************************************
	 *
	 *  error = CCtrlBreakpoint ();
	 *
	 *  description:
	 *		Function to hit a breakpoint
	 *
	 *  parameters:
	 *	returns:
	 */
	void (*CCtrlBreakpoint) (void);
	/*****************************************************************
	 *
	 *  CCtrlFlags aka 'Merker'
	 *
	 */
	unsigned char				CCtrlFlags[ 256 ];
}
ccontrol_func_t;




/*-------------------------------------------------------------------*
 *  function prototypes                                              *
 *-------------------------------------------------------------------*/
void start_up (void) __attribute__ ((__section__ (".startup"), __used__ ));

int main ( void );

/*-------------------------------------------------------------------*
 *  global definitions                                               *
 *-------------------------------------------------------------------*/
/*-------------------------------------------------------------------*
 *  global data                                                      *
 *-------------------------------------------------------------------*/ 

#endif	/*	ifndef _CCONTROL_H_	*/

/*-------------------------------------------------------------------*
 *  eof                                                              *
 *-------------------------------------------------------------------*/

